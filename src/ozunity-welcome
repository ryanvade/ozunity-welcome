#!/usr/bin/env python
# -*- coding:utf-8 -*-
#
# Original Copyright © 2012-2013 "Korora Project" <dev@kororaproject.org>
# Original Copyright © 2013-2015 "Manjaro Linux" <support@manjaro.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import inspect
import os
from signal import signal, SIGINT, SIG_DFL
from subprocess import Popen
from sys import exit
try:
    # python 3
    from urllib.request import urlopen, pathname2url
except ImportError:
    # python 2
    from urllib import urlopen, pathname2url
from webbrowser import open_new_tab
from json import dumps as to_json
from gi.repository import WebKit, Gtk


class WelcomeConfig(object):
    def __init__(self):
        # store our base architecture
        if os.uname()[4] == 'x86_64':
            self._arch = '64-bit'
        else:
            self._arch = '32-bit'

        # store we are a live CD session
        self._live = os.path.exists('/bootmnt/manjaro')

        # store full path to our binary
        self._welcome_bin_path = os.path.abspath(inspect.getfile(inspect.currentframe()))

        # store directory to our welcome configuration
        self._config_dir = os.path.expanduser('~/.config/ozunity/welcome/')

        # store full path to our autostart symlink
        self._autostart_path = os.path.expanduser('~/.config/autostart/ozunity-welcome.desktop')

        # ensure our config directory exists
        if not os.path.exists(self._config_dir):
            try:
                os.makedirs(self._config_dir)
            except OSError as e:
                print(e)
                pass

        # does autostart symlink exist
        self._autostart = os.path.exists(self._autostart_path)

    def change_autostart(self, state):
        if state and not os.path.exists(self._autostart_path):
            # create the autostart symlink
            try:
                os.symlink('/usr/share/applications/ozunity-welcome.desktop', self._autostart_path)
            except OSError as e:
                print(e)
                pass
        elif not state and os.path.exists(self._autostart_path):
            # remove the autostart symlink
            try:
                os.unlink(self._autostart_path)
            except OSError as e:
                print(e)
                pass
        # determine autostart state based on absence of the disable file
        self._autostart = os.path.exists(self._autostart_path)

class ManjaroAppView(WebKit.WebView):
    def __init__(self):
        WebKit.WebView.__init__(self)

        self._config = WelcomeConfig()

        self.connect('load-finished', self._load_finished_cb)
        self.connect('navigation-policy-decision-requested', self._nav_request_policy_decision_cb)
        self.l_uri = None

    def _push_config(self):
        # TODO: push notification should be connected to angularjs and use a broadcast event
        # any suitable controllers will be able to listen and respond accordingly, for now
        # we just use jQuery to manually toggle

        self.execute_script("$('#arch').html('{}')".format(self._config._arch))
        self.execute_script("$('#autostart').toggleClass('icon-check', {})\
            .toggleClass('icon-check-empty', {})".format(to_json
                (self._config._autostart), to_json(not self._config._autostart)))

        self.execute_script("$('#{}').hide()".format(
            'buildmanjaro' if self._config._live else 'install'))
        self.execute_script("$('#{}').hide()".format(
            'donations' if self._config._live else 'install-cli'))
        self.execute_script("$('#{}').hide()".format(
            'password' if not self._config._live else '#'))

    def _load_finished_cb(self, view, frame):
        self._push_config()

    def _nav_request_policy_decision_cb(self, view, frame, net_req, nav_act, pol_dec):
        uri = net_req.get_uri()

        try:
            if uri.index('#') > 0:
                uri = uri[:uri.index('#')]
        except ValueError:
            pass

        if uri == self.l_uri:
            pol_dec.use()
            return True

        if uri.startswith('cmd://'):
            self._do_command(uri)
            return True

        self.l_uri = uri

        page = urlopen(uri)
        frame.load_string(page.read().decode("iso-8859-15"), "text/html", 
            "iso-8859-15", page.geturl())
        pol_dec.ignore()
        return True

    def _do_command(self, uri):

        if uri.startswith('cmd://'):
            uri = uri[6:]

        if uri == 'gnome-help':
            Popen(['yelp'])

        elif uri == 'kde-help':
            Popen(['khelpcenter'])

        elif uri == 'install':
            if os.path.exists("/usr/bin/ozunity-thus"):
                Popen(['sudo', 'thus'])
            elif os.path.exists("/usr/bin/calamares"):
                Popen(['sudo', 'calamares'])

        elif uri == 'install-cli':
            Popen(['ozunity-welcome-terminal', 'sudo setup'])

        elif uri == 'close':
            Gtk.main_quit()

        elif uri == 'toggle-startup':
            # toggle autostart
            check_uncheck = True if not self._config._autostart else False
            self._config.change_autostart(check_uncheck)

            self._push_config()

        elif uri.startswith("link?"):
            open_new_tab(uri[5:])

        else:
            print('Unknown command: {}'.format(uri))


class WelcomeApp(object):
    def __init__(self):
        # establish our location
        self._location = os.path.dirname(os.path.abspath(inspect.getfile(
            inspect.currentframe())))

        # check for relative path
        if os.path.exists(os.path.join(self._location, 'data/')):
            print('Using relative path for data source. Non-production testing.')
            self._data_path = os.path.join(self._location, 'data/')
        elif os.path.exists('/usr/share/ozunity-welcome/'):
            print('Using /usr/share/ozunity-welcome/ path.')
            self._data_path = '/usr/share/ozunity-welcome/'
        else:
            print('Unable to source the ozunity-welcome data directory.')
            exit(1)

        self._build_app()

    def _build_app(self):
        # build window
        w = Gtk.Window()
        w.set_position(Gtk.WindowPosition.CENTER)
        w.set_wmclass('Oz Unity Welcome', 'Oz Unity Welcome')
        w.set_title('Oz Unity Welcome')
        w.set_size_request(768, 496)
        w.set_icon_from_file(os.path.join(self._data_path, "img/favicon.png"))

        # build webkit container
        mv = ManjaroAppView()

        # load our index file
        file_in = os.path.abspath(os.path.join(self._data_path, 'index.template'))
        file_out = os.path.abspath(os.path.join(self._data_path, 'index.html'))
        is_live = mv._config._live
        repl = {'live': ('' if is_live else 'hide'),
         'installed': ('hide' if is_live else '')}
        with open(file_in, 'rt') as infile, open(file_out, 'wt') as outfile:
            for line in infile:
                for src, target in repl.items():
                    line = line.replace(src, target)
                outfile.write(line)

        uri = 'file://' + pathname2url(file_out)
        mv.open(uri)

        # build scrolled window widget and add our appview container
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        sw.add(mv)

        # build a an autoexpanding box and add our scrolled window
        b = Gtk.VBox(homogeneous=False, spacing=0)
        b.pack_start(sw, expand=True, fill=True, padding=0)

        # add the box to the parent window and show
        w.add(b)
        w.connect('delete-event', self.close)
        w.show_all()

        self._window = w
        self._appView = mv

    def run(self):
        signal(SIGINT, SIG_DFL)
        Gtk.main()

    def close(self, p1, p2):
        Gtk.main_quit(p1, p2)

app = WelcomeApp()
app.run()
